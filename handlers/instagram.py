import asyncio

from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import concurrent.futures
from aiogram.utils import executor
from pandas import ExcelWriter

from create_bot import dp, bot
from keyboards import client_k
from singlepostscraper import PostStatAggregator
import pandas as pd
from aiogram.types import InputFile



class FSMvib(StatesGroup):
    soc_net = State()
    link = State()
    login = State()
    password = State()

async def get_inst(callback:types.CallbackQuery,state:FSMContext):
    async with state.proxy() as soc_net:
        soc_net["soc_net"] = callback.data.split('_')[1]
    kap = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cnopka_start = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    kap.add(cnopka_start)
    await FSMvib.next()
    await bot.send_message(callback.message.chat.id,"""–î–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏ —Ä–∏–ª—Å–æ–≤ –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∞—Ö (Saved) –≤ Instagram –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—Éüíæ\n\n–ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É –≤ Saved (—Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞).""",
                                  reply_markup=kap)


async def get_link(message: types.message, state:FSMContext) -> str:
    async with state.proxy() as st:
        st["link"] = message.text
    await FSMvib.next()
    await bot.send_message(message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram (–≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ —Ä–∏–ª—Å–æ–≤, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è‚úñÔ∏è)")


async def get_login(message: types.message, state:FSMContext):
    async with state.proxy() as st:
        st["login"] = message.text
    await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram (–≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ —Ä–∏–ª—Å–æ–≤, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è‚úñÔ∏è)")
    await FSMvib.next()


async def get_password(message:types.Message, state:FSMContext):
    loop = asyncio.get_running_loop()
    async with state.proxy() as st:
        st["password"] = message.text
        options = {"instagram": {"us–µrname": f"{st['login']}", "password": f"{st['password']}"}}
        fun = PostStatAggregator(social_network="instagram",collection_link=st['link'], options=options)
    await state.finish()
    await bot.send_message(message.chat.id,"–î–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—èüìÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..", reply_markup=client_k.coll_service)
    with concurrent.futures.ThreadPoolExecutor() as pool:
        data = await loop.run_in_executor(
            pool, fun.get_data)
    if len(data)<20:
        text = str(data).replace("}", "").replace("{", "").replace("[", "").replace("]", "").replace("'play_count","\n'play_count'")
        await bot.send_message(message.from_user.id,text=text, reply_markup=client_k.coll_service)
    try:
            df = pd.DataFrame({"link": [(list(x.keys())[0]) for x in data],
                               "play_count": [(str(list(x.values())[0])).split(" ")[0].replace("play_count:","") for x in data],
                               "comment_count":[(str(list(x.values())[0])).split(" ")[1].replace("comment_count:","") for x in data],
                               "like_count":[((str(list(x.values())[0])).split(" "))[2].replace("like_count:","") for x in data]})
            df.to_excel('data.xlsx')
            await bot.send_document(message.chat.id,document=open('data.xlsx', "rb"))
    except Exception as f:
        print(f)







async def FSMstop(message:types.Message, state:FSMContext):
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await message.reply("–û–ö", reply_markup=client_k.coll_service)


def register_handlers_instagram(dp:Dispatcher):
    dp.register_callback_query_handler(get_inst, Text(startswith="soc_instagram"), state=None)
    dp.register_message_handler(FSMstop, Text(equals="–û—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(get_link, state=FSMvib.soc_net)
    dp.register_message_handler(get_login, state=FSMvib.link)
    dp.register_message_handler(get_password, state=FSMvib.login)



